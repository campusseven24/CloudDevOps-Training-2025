1. 브랜치 계층 구조 
    1) main (production)
          |
          |--- develop (integration)
                   |
                   |--- feature/*   (새 기능 개발) 
                   |
                   |--- release/*   (릴리즈 준비)
                   |
                   |--- hotfix/*    (긴급 수정)
                   |
                   |--- bugfix/*    (일반 버그 수정)
                   |
                   |--- refactor/*  (코드 개선)
                   |
                   |--- test/*  (테스트)
                   |
                   |--- docs/* (문서화)

    2) 브랜치 별 요약 
    
        브랜치 타입     목적          분기 from     병합 to      삭제 시점
        ------------------------------------------------------------ 
        main        프로덕션 배포       -             -        삭제 안함
        develop     개발 통합          main         main       삭제 안함  
        feature     기능 개발          develop      develop    병합 후
        relase     릴리즈 준비         develop     main,develop 병합 후 
        hotfix      긴급 수정          main        main,develop 병합 후
        bugfix      버그 수정          develop      develop     병합 후
        test        테스트             develop         -       테스트 후
        refactor    코드 개선          develop      develop     병합 후
        docs        문서화             develop      develop     병합 후

2. 브랜치 생성 step by step 
    1) Github에서 Repository 생성
    2) 로컬 프로젝트 초기화 
        - 프로젝트 폴더 생성
            - mkdir java-shopping-practice
            - cd java-shopping-practice/    
        - Git 초기화 
            - git init
        - 첫 파일 생성
            - echo "# Java Shopping Mall Practice" > README.md
        - 프로젝트 구조 생성 
            - mkdir -p src/javaproject/{domain,controller,service,repository,util,exception}                                        
            - mkdir -p data docs
        - .gitignore 파일 생성
            - cat > .gitignore << 'EOF'
                *.class
                data/*
                bin/
                EOF

        - 첫 커밋 
            - git add .
            - git commit -m "Initial commit - 프로젝트 구조 설정"

        - Github 연결
            - git remote add origin https://github.com/...   

        - Github에 푸시
            - git push -u origin main

    3) develop 브랜치 생성                                             
        - 현재 브랜치 확인 
            - git branch
        - develop 브랜치 생성 및 이동
            - git checkout -b develop
        - README 수정 
            - echo "## Development Brach">> README.md
            - echo "개발 통합 브랜치입니다.">> README.md
        - 커밋
            - git add README.md
            - git commit -m "[docs] develp 브랜치 설명 추가"
        - Github에 develop 브랜치 푸시
            - git push -u origin develop
        - 브랜치 확인 
            - git branch -a      

    4) feature 브랜치 생성 및 삭제
        - User 도메인 기능 개발
            - feature 브랜치 생성
                - git checkout -b feature/domain-user-practice
            - User.java 파일 생성
            - 변경사항 확인
                - git status
            - 커밋
                - git add src/javaproject/domain/User.java   
                - git commit -m "[feat] User 도메인 클래스 생성 - 기본 필드정의"
            - 두번째 커밋
            - Github에 푸시 
                - git push -u origin feature/domain-user-practice
            - 푸시 결과 확인
                - git log --oneline --graph

        - Pull Request 생성 (Github 웹에서)
            - Github Repository 페이지 접속 
            - "Compare & pull request" 버튼 클릭
            - "Create pull request" 클릭  

        - PR 병합 후 로컬 정리 
            - develop으로 이동  
                - git checkout develop
            - 원격 main 내용 가져오기 (PR이 병합된 후)
                - git pull origin main
            - 병합 확인 
                - git log --oneline --graph -5                
            - feature 브랜치 삭제
                - git branch -d feature/domain-user-practice
            - 원격 feature 브랜치 삭제 
                - git push origin --delete feature/domain-user-practice
            - 브랜치 정리됨 확인
                - git branch -a  

    5) bugfix 브랜치 생성 및 삭제 
        - bugfix 브랜치 생성 
            - git checkout -b bugfix/issue-01-user-validation-practice
        - User.java 수정(버그 수정)
        - 커밋
            - git add src/javaproject/domain/User.java
            - git commit -m "[fix] #01 User 유효성 검증 누락 수정"
        - Github에 푸시 
            - git push -u origin bugfix/issue-01-user-validation-practice
        - PR 생성 및 병합 (GitHub 웹)
                            
        - PR 병합 후 로컬 정리 
            - develop으로 이동  
                - git checkout develop
            - 원격 main 내용 가져오기 (PR이 병합된 후)
                - git pull origin main
            - 병합 확인 
                - git log --oneline --graph -5                
            - bugfix 브랜치 삭제
                - git branch -d bugfix/issue-01-user-validation-practice
            - 원격 bugfix 브랜치 삭제 
                - git push origin --delete bugfix/issue-01-user-validation-practice
            - 브랜치 정리됨 확인
                - git branch -a 

    6) hotfix 브랜치 생성 및 삭제 
        - 긴급 수정 시나리오 
            - main 브랜치에서 시작 (중요!)
                - git checkout main
                - git pull origin main
            - hotfix 브랜치 생성
                - git checkout -b hotfix/critical-security-fix
            - 긴급 보안 수정 
                - IDE에서 자바 프로젝트 작업 
            - 커밋 
                - git add src/javaproject/util/*
                - git commit -m "[hotfix] 긴급 보완 취약점 패치 - XSS 방지"
            - main에 병합 
                - git checkout main
                - git merge --no-ff hotfix/critical-security-fix
                - git push origin main
            - develop에도 병합 
                - git checkout develop
                - git merge --no-ff hotfix/critical-security-fix
                - git push origin develop
            - hotfix 브랜치 삭제
                - git branch -d hotfix/critical-security-fix                    

    7) refactor 브랜치 생성 및 삭제 
        - 코드 개선 작업
        - develop에서 시작 
            - git checkout develop
        - refactor 브랜치 생성
            - git checkout -b refactor/user-service-structure
        - IDE에서 리팩토링 작업 
        - 커밋
            - git add src/javaproject/service/*
            - git commit -m "[refactor] UserSerice 레이어 분리 - 비즈니스 로직 개선"
        - 푸시 
            - git push -u origin refactor/user-service-structure                 

        - Pull Request 생성 (Github 웹에서)
            - Github Repository 페이지 접속 
            - "Compare & pull request" 버튼 클릭
            - "Create pull request" 클릭  

        - PR 병합 후 로컬 정리 
            - develop으로 이동  
                - git checkout develop
            - 원격 main 내용 가져오기 (PR이 병합된 후)
                - git pull origin main
            - 병합 확인 
                - git log --oneline --graph -5                
            - refactor 브랜치 삭제
                - git branch -d refactor/user-service-structure
            - 원격 refactor 브랜치 삭제 
                - git push origin --delete refactor/user-service-structure
            - 브랜치 정리됨 확인
                - git branch -a  
    
    8) release 브랜치 생성 및 삭제
        - develop에서 시작
            - git checkout develop
            - git pull origin develop

        - release 브랜치 생성
            - git checkout -b release/v1.0.0

        - 버전 파일 생성
            - echo "version=1.0.0" > version.properties
            - echo "release_date=2025-08-12" >> version.properties

        - README 업데이트 
            cat >> README.md << 'EOF'
            ## Version History
            - v1.0.0 (2025-08-12): 첫 번째 정식 릴리즈
            - User 도메인 구현
            - 기본 서비스 레이어 구현
            - 보안 패치 적용
            EOF

        - 커밋 
            - git add README.md version.properties
            - git commit -m "[release] v1.0.0 릴리즈 준비"

        (- 푸시
            - git push -u origin release/v1.0.0 )

        - main에 병합 (PR 또는 직접)
            - git checkout main
            - git pull origin main
            - git merge --no-ff release/v1.0.0    
            - git tag -a v1.0.0 -m "Release version 1.0.0"
            - git push origin main --tags     

        - develop에도 병합 
            - git checkout develop
            - git merge --no-ff release/v1.0.0
            - git push origin develop

        - relase 브랜치 삭제
            - git branch -d release/v1.0.0
            (- git push origin --delete release/v1.0.0)                           


    


