1. 브랜치가 필요한 이유
    1) 브랜치 (branch)
    2) 예: 제품 출시 
        
        A => B => C => D

      MS        A => B => C => D => ME   
      google    A => B => C => D => GE => GF => GH 
      Apple     A => B => C => D => AE
      main      A => B => C => D => E  

        - 저장소마다 버전 관리를 따로 하는 방법 

2. 브랜치 살펴보기 
    1) 깃으로 버전 관리를 시작하면 기본적으로 main 
       브랜치가 만들어짐.
    2) 브랜치는 커밋을 가리키는 포인터와 비슷함 
    3) 새 브랜치 만듦
        - 기존 파일은 main 브랜치에 그대로 유지함 
        - 새 브랜치에서 기존 파일 내용을 수정, 기능 추가 
        - main 브랜치에서 새 브랜치를 만드는 것을 
          분기한다(branch)고 함.

3. 브랜치 만들기
    1) git branch 
        - 브랜치를 만들거나 확인하는 명령어 
    2) 새 커밋을 추가하기 

4. 브랜치 전환하기(이동하기)                                 
    1) git switch
        - 브랜치 간에 이동 
        - 체크아웃함 
    2) 전환한 브랜치에서 커밋하기 

5. 브랜치와 커밋의 관계 
    1) git log --oneline --branches 
       git log --oneline --branches --graph

6. 브랜치 간의 차이점 확인하기 
    1) git log 브랜치 이름..브랜치 이름  
        - 마침표 왼쪽에 있는 브랜치를 기준으로
          오른쪽 브랜치와 비교함 

7. 브랜치 병합하기 
    1) 어느 시점에서는 브랜치 작업을 마무리하고 
       기존 브랜치와 합쳐야 함 
        - 병합시 여러 상황이 발생할 수 있음.
        - 충돌(conflict)시 해결해야 함.
    2) 서로 다른 파일 병합하기 
        - git merge 브랜치명
    3) 서로 다른 브랜치에서 한 문서의 다른 부분을 수정했을때
       병합하기 
        - 2개의 브랜치에 서로 다른 문서가 있다면 
          브랜치 병합하기 쉬움.
        - 2개의 브랜치에 같은 문서를 수정한다면 병합결과는???
    4) 서로 다른 브랜치에서 한 문서의 같은 부분을 
       수정했을 때 병합하기  
        - 브랜치 충돌(conflict)이 발생함 

8. 병합이 끝난 브랜치 삭제하기 
    1) 더 이상 사용하지 않는 브랜치는 깃에서 삭제 가능함 
    2) git branch -d 브랜치명            
