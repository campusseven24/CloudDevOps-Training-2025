1. 생성자(constructor)가 필요한 이유 
    1) 회원 객체의 멤버 변수에 초기값을 설정함 
        - 회원의 초기값 설정하는 부분이 계속 코드 중복됨
        - 메서드를 사용해서 반복을 제거함 
        - 해당 메서드를 객체지향 캡슐화하는 방법으로 변경함
            - 자기 자신의 데이터를 변경하는 기능(메서드)을 제공함 
    2) 프로그래밍 하다보면 객체를 생성하고 이후 바로 초기값을 
       할당하는 경우가 많음. => 매번 이런 메서드를 만들어야 함.
    3) 객체 지향 언어는 객체를 생성하자마자 즉시 필요한 기능을 
       좀 더 편리하게 수행할 수 있도록 생성자(constructor)라는 기능을
       제공함.     
       - 중복 호출 제거 
       - 생성자 덕분에 객체를 생성하면서 동시에 생성 직후에 필요한 
         작업을 한번에 처리할 수 있게 됨.   
        

2. this
    1) 인스턴스 자신을 가리킴.
    2) 매개변수의 이름과 멤버 변수의 이름이 같은 경우
        - this를 사용해서 둘을 명확하게 구분해야 함.             
    3) this의 생략
        - 이 경우 변수를 찾을 때 가까운 지역변수(매개변수도 지역변수임)를
          먼저 찾고 없으면 그다음으로 멤버 변수를 찾음.
        - 멤버 변수도 없으면 오류가 발생함.

3. 생성자 특징
    1) 메서드와 비슷 
    2) 생성자의 이름은 클래스 이름과 같아야 함.
        - 첫 글자도 대문자로 시작함.
    3) 생성자는 반환 타입이 없음.
    4) 나머지는 메서드와 같음.

4. 생성자 호출
    1) 생성자는 인스턴스를 생성하고 나서 즉시 호출됨.
    2) 생성자를 호출하는 방법 
        - new 생성자이름(생성자에 맞는 인수 목록)
        - new 클래스이름(생성자에 맞는 인수 목록)

        - new 키워드를 사용해서 객체를 생성할때 마지막에 ()도 포함함
            - 바로 생성자 때문임.
    3) 객체를 생성하면서 동시에 생성자를 호출함    

5. 생성자의 제약 
    1) 생성자 호출 필수 
        - 생성자는 반드시 호출되어야 함
    2) 객체를 생성할 때 직접 정의한 생성자가 있다면 
        - 직접 정의한 생성자를 반드시 호출해야 함
    3) 생성자를 메서드 오버로딩처럼 여러 개 정의 할수 있음.
        - 객체 생성시 하나만 호출하면 됨.
    4) 생성자를 사용하면 필수값 입력을 보장할 수 있음.

6. 기본 생성자 (default constructor)      
    1) 생성자를 만들지 않았는데, 생성자를 호출함 
    2) 매개변수가 없는 생성자를 기본 생성자라 함.
    3) 클래스에 생성자가 하나도 없으면 자바 컴파일러는 
       매개변수가 없고, 작동하는 코드가 없는 기본 생성자를 
       자동으로 만들어 줌.
        - 생성자가 없으면 기본 생성자가 제공됨
    4) 생성자가 하나라도 있으면 자바는 기본 생성자를 만들지 않음 

7. 생성자 오버로딩과 this()      

