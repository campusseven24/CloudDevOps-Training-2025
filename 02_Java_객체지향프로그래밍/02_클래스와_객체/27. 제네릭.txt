1. 제네릭 (generic) 
    1) 메서드는 매개변수를 사용할 때 자료형을 가지고 있음
    2) 대부분은 하나의 자료형으로 구현함
    3) 변수나 메서드의 자료형을 필요에 따라 여러 자료형으로 바꿀 수 있다면
       프로그래밍이 훨씬 유연해 짐
    4) 어떤 값이 하나의 참조 자료형이 아닌 여러 참조 자료형을 사용할수
       있도록하는 프로그래밍을 제네릭 프로그래밍이라고 함.   
    5) 제너릭 프로그래밍은 참조 자료형이 변환될 때 이에 대한 검증을
       컴파일러가 하므로 안정적임.
    6) 컬렉션 프레임워크도 많은 부분이 제네릭으로 구현되어 있음.      

2. 제네릭없이 여러 객체를 저장하는 클래스 정의 
    1) 각 상품마다 각각의 클래스를 생성하는 대신,
       최상위 클래스인 Object 타입의 필드 선언함 
       - 모든 타입의 상품을 저장할 수 있는 클래스를 생성할 수 있음.
    2) 객체를 get() 메서드로 가져온 경우 각각의 타입으로 
       다운캐스팅을 수행해야 함 
       - 잘못된 캐스팅으로 실행 예외 발생할 수 있음.

3. 다이아몬드 연산자 
    1) <>
    2) java 7부터 제네릭 자료형의 클래스를 생성할 때 사용

4. 제네릭 클래스, 제네릭 인터페이스 
    1) 클래스명 다음에 <제네릭 타입 변수명(들)>  
                      ----------------
                        T           타입(Type)
                        K           키(Key) 
                        V           값(Value)
                        N           숫자(Number)
                        E           원소(Element)    
    2) 문법
        - 접근 지정자 class 클래스명<T> {
            // 타입 T를 사용한 코드 
          }   

        - 접근 지정자 class 클래스명<K, V> {
            // 타입 K, V를 사용한 코드 
          }     

        - 접근 지정자 interface 인터페이스명<T> {
            // 타입 T를 사용한 코드 
          }   

        - 접근 지정자 interface 인터페이스명<K, V> {
            // 타입 K, V를 사용한 코드 
          }                           

    3) 제네릭 클래스의 객체 생성
      - 객체 생성 과정은 일반 클래스의 객체 생성 과정과 비슷함
      - 객체를 생성할 때 제네릭 타입 변수에 실제 타입을 대입함 
      - 문법
          클래스명<실제 제네릭 타입> 참조변수명 = new 클래스명<실제 제네릭 타입>();
          or 
          클래스명<실제 제네릭 타입> 참조변수명 = new 클래스명<>();

    4) 제네릭 타입 범위 제한 
      - 필요성
        - 제네릭 클래스 또는 제네릭 메서드를 사용할 때는   
          객체를 생성할 때와 메서드 호출할 때 제네릭 타입을 지정함 
        - 예
          - 과일 클래스 
            - 사과, 배, 딸기, 참외,....
          - 문구 클래스 
            - 연필, 지우개, 볼펜,....
        - 제네릭 타입으로 올수 있는 실제 타입의 종류를 제한함 
      - 제네릭 타입 범위 제한 
        - 문법 
          접근 지정자 class 클래스명<T extends 최상위 클래스/인터페이스명> {

          } 

        - 예) <T extends Fruit>   
            - Fruit 객체 또는 Fruit의 자식 클래스 객체만 대입 가능함.                                  

5. 제네릭 메서드 
  1) 클래스 전체를 제네릭으로 선언하는 대신에
     일반 클래스 내부의 특정 메서드만 제네릭으로 선언 할수 있음.
  2) 리턴 타입 또는 입력 매개변수의 타입을 제네릭 타입 변수로 선언함 
  3) 제네릭 메서드는 호출되는 시점에 실제 제네릭 타입을 지정함   
  4) 문법 
    - 제네릭 타입 변수명 1개일 때

      접근 지정자 <T> T 메서드명(T t) {
          // 타입 T를 사용한 코드 
      }

    - 제네릭 타입 변수명 2개일 때      

      접근 지정자 <T, V> T 메서드명(T t, V v) {
          // 타입 T,V를 사용한 코드 
      }    

    - 매개변수에만 제네릭이 사용됐을 때

      접근 지정자 <T> void 메서드명(T t) {
          // 타입 T를 사용한 코드 
      }  

    - 리턴타입에만 제네릭이 사용됐을 때

      접근 지정자 <T> T 메서드명(int a) {
          // 타입 T를 사용한 코드 
      }     

    - 제네릭 메서드 호출 

      참조 객체.<실제 제네릭 타입>메서드명(입력매개변수);           