1. 자바 메모리 구조 
    1) 메서드 영역 (Method Area) 
        - 클래스 정보 
            - 클래스, 메서드 등의 실행 코드 (바이트 코드)
        - static 영역
            - static 변수 보관 
        - 상수 풀 
            - 공통 리터럴 상수
            - "hello", 123                
    2) 스택 영역 (Stack Area)
        - 실제 프로그램이 실행되는 영역 
        - 메서드를 실행할 때마다 하나씩 쌓임
        - 지역 변수, 메소드 호출 정보 
        - 스택 프레임 
            - 메서드를 호출할 때마다 하나의 스택 프레임이 쌓임 
            - 메서드가 종료되면 해당 스택 프레임이 제거됨.
    3) 힙 영역 (Heap Area)
        - 객체(인스턴스)가 생성되는 영역 
        - new 명령어를 사용하면 이 영역을 사용함                 
        - 배열도 이 영역에 생성됨
        - 가비지 컬렉션(GC)이 더 이상 참조되지 않는 객체를 제거함 

2. 스택과 큐 자료 구조 
    1) 후입 선출 (LIFO, Last In First On)
        - 나중에 넣은 것이 가장 먼저 나오는 것
        - 이런 자료 구조를 스택이라 함.
    2) 선입 선출 (FIFO, Fist In First Out)
        - 후입 선출과 반대
        - 가장 먼저 넣은 것이 가장 먼저 나오는 것 
        - 이런 자료 구조를 큐(Queue)라고 함.

3. 스택 영역 
    1) 처음 자바 프로그램을 실행하면 main()을 실행함
        - main()을 위한 스택 프레임이 하나 생성됨. 
            - 내부에 args라는 매개변수를 가짐 
    2) main()은 method1()을 호출함 
        - method1() 스택 프레임이 생성됨
            - 내부에 m1, cal 지역 변수(매개변수 포함)를 가짐 
            - 해당 지역변수들이 스택 프레임에 포함됨 
    3) method1은 method2를 호출함 
        - method2() 스택 프레임이 생성됨 
            - 내부에 m2 지역변수(매개변수 포함)를 가짐 
            - 해당 지역변수가 스택 프레임에 포함됨     
    4) 정리
        - 자바는 스택영역을 사용해서 메서드 호출과 지역 변수(매개변수 포함)를
          관리함.
        - 메서드를 계속 호출하면 스택 프레임이 계속 쌓임
        - 지역 변수(매개변수 포함)는 스택 영역에서 관리함.
        - 스택 프레임이 종료되면 지역 변수도 함께 제거됨.
        - 스택 프레임이 모두 제거되면 프로그램도 종료됨.    

4. 스택 영역과 힙 영역 함께 사용
    1) main() => method1() => method2() 순서로 호출하는 
       단순한 코드임.
    2) method1()에서 Data 클래스의 인스턴스를 생성함 
    3) method1()에서 method2()를 호출할때 매개변수에 
       Data 인스턴스의 참조 값을 전달함.
    4) 정리
        - 지역 변수는 스택 영역에,
          객체(인스턴스)는 힙 영역에서 관리되는 것을 확인함.
        - 메서드 영역이 관리하는 변수가 있음.
            - static 변수         

5. 공통으로 사용하는 변수가 필요한 경우
    1) 여러 인스턴스가 공유하는 기준 값이 필요한 경우 
    2) 학생마다 새로운 학번 생성
    3) 카드회사에서 카드를 새로 발급할때마다 새로운 카드 번호를 부여 
    4) 회사에 사원이 입사할때 마다 새로운 사번이 필요한 경우 

6. static 변수 선언과 사용하기 
    1) 인스턴스 생성될 때 마다 만들어지는 변수가 아닌,
        처음 프로그램이 메모리에 로딩될 때 메모리를 할당
    2) 클래스 변수, 정적 변수라고도 함 (<---> 인스턴스 변수)
    3) 인스턴스 생성과 상관 없이 사용 가능하므로 
       클래스 이름으로 직접 참조 가능.
    4) static int serialNum;       
    5) static 변수와 메서드는  인스턴스 변수, 메서드가 아님 
        - 클래스 이름으로 직접 참조    

7. 멤버 변수(필드) 종류      
    1) 인스턴스 변수 
        - static이 붙지 않은 멤버 변수 
        - 인스턴스 변수는 인스턴스를 만들 때 마다 새로 만들어짐.
    2) 클래스 변수 
        - static이 붙은 멤버 변수 
        - 정적 변수, static 변수, 공유 변수, 전역 변수등으로 부름.
        - static이 붙은 멤버 변수는 인스턴스와 무관하게 클래스에 
          바로 접근해서 사용할수 있음.
          - 클래스 자체에 소속되어 있음. 따라서 클래스 변수라 함.
        - 클래스 변수는 자바 프로그램을 시작할 때 딱 1개가 만들어짐.
          - 인스턴스와는 다르게 보통 여러곳에서 공유하는 목적으로 사용됨          

8. 변수와 생명주기 
    1) 지역변수(매개변수)
        - 스택 영역에 있는 스택 프레임 안에 보관됨
        - 메서드가 종료되면 스택 프레임도 제거 됨
            - 이때 해당 스택 프레임에 포함된 지역 변수도 함께 제거됨 
        - 지역 변수는 생존 주기가 짧음.    
    2) 인스턴스 변수
        - 인스턴스에 있는 멤버 변수를 인스턴스 변수라 함.
        - 인스턴스 변수는 힙 영역을 사용함 
        - 힙 영역은 GC(가비지 컬렉션)가 발생하기 전까지는 생존하기 
          때문에 보통 지역 변수보다 생존 주기가 긺.        
    3) 클래스 변수 
        - 메서드 영역의 static 영역에 보관되는 변수임.
        - 메서드 영역은 프로그램 전체에서 사용하는 공용 공간임.
        - 클래스 변수는 해당 클래스가 JVM에 로딩되는 순간 생성됨.
        - JVM이 종료될 때까지 생명주기가 이어짐.
            - 가장 긴 생명주기를 가짐.      

9. 멤버 메서드 종류 
    1) 인스턴스 메서드 
        - static이 붙지 않은 멤버 메서드 
        - 인스턴스를 생성해야 사용할 수 있음 
        - 인스턴스에 소속되어 있음 
    2) 클래스 메서드 
        - static이 붙은 멤버 메서드
        - 정적 메서드, static 메서드 
        - 인스턴스와 무관하게 클래스에 바로 접근해서 사용 가능
        - 클래스 자체에 소속되어 있음.            
        - 객체 생성이 필요없이 메서드 호출만으로 필요한 기능을 
          수행할때 주로 사용함.
            - 예) 유틸리티성 메서드 (수학의 여러가지 기능)   

10. main() 메서드 
    1) public static void main(String[] args)
        - 고정된 시그니처       
    2) JVM이 프로그램 시작 시 찾는 진입점(Entry Point)
    3) static이 필요한 이유 
        - 객체 생성 없이 클래스 로딩 시점에 바로 호출 가능 
        - 메모리 효율성과 프로그램 시작의 단순성 보장   

11. final 
    1) final 변수와 상수 
        - final - 지역변수
            - 변수에 final 키워드가 붙으면 더는 값을 변경할 수 없음  
            - final을 지역 변수에 설정할 경우
                - 최초 한번만 할당 가능함
                - 이후 변수의 값을 변경하려면 컴파일 오류 발생함
            - 매개변수에 final이 붙으면 내부에서 매개변수의 값을 변경할수 없음.
                - 메서드 호출 시점에 사용된 값이 끝까지 사용됨.  

        - final - 멤버변수(필드)
            - final을 필드에 사용할 경우 
                - 해당 필드는 생성자를 통해서 한번만 초기화 가능함 
            - static final ~~
                - JVM의 static 영역에 존재함 
                    - JVM 상에서 하나만 존재하므로 중복과 비효율 문제를 해결됨
                - final 키워드를 사용해서 초기화 값이 변하지 않음    
                - 상수(Constant)
                    - 변하지 않고, 항상 일정한 값을 갖는 수
                    - 고정된 값 
                    - static final 키워드를 사용함 
                    - 대문자를 사용하고 구분은 _(언더스코어)로 함 (관례)
                    - 필드를 직접 접근해서 사용함. 
    
    2) 애플리케이션 안에는 다양한 상수가 존재할 수 있음.  
        - 이런 상수들은 전반에서 사용하기 때문에 public을 사용함
        - 상수는 중앙에서 값을 하나로 관리할 수 있음 
        - 상수는 런타임에 변경 할 수 없음   
            - 상수를 변경하려면 프로그램을 종료하고,
              코드를 변경한 다음에 프로그램을 다시 실행해야 함.   

    3) 클래스에 final 
        - 상속이 안되는 클래스임 
        - final로 선언된 클래스는 확장 될 수 없음.
        - 예: public final class MyFinalClass {...}     
            - 다른 클래스가 final로 선언된 클래스를 상속받을 수 없음.

    4) 메서드에 final 
        - 오버라이딩이 안되는 메서드임
        - final로 선언된 메서드는 오버라이드 될수 없음.
        - 예: public final void myFinalMethod() {...}  
            - 상속받은 서브 클래스에서 이 메서드를 변경할 수 없음.                                                                        